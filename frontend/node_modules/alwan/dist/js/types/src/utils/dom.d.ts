import type { Attrs, DOMRectArray } from "../types";
export declare const getBody: () => HTMLElement;
export declare const getElements: (reference: string | Element, context?: Element) => Element[];
export declare const getInteractiveElements: (context: HTMLElement) => Element[];
export declare const appendChildren: (element: Element, ...children: Array<Element | null>) => void;
export declare const setInnerHTML: (element: Element, html: string) => void;
export declare const setAttribute: (el: Element | null, name: string, value: string | number) => void;
export declare const joinClassnames: (...classnames: string[]) => string;
export declare const createElement: <T extends keyof HTMLElementTagNameMap>(tagName: T, className?: string, children?: Array<Element | null>, content?: string, attributes?: Attrs) => HTMLElementTagNameMap[T];
export declare const createDivElement: (classname: string, ...children: Array<Element | null>) => HTMLDivElement;
export declare const removeElement: (element: Element) => void;
export declare const replaceElement: (element: Element, replacement: Element) => Element;
export declare const createButton: (label?: string, className?: string, content?: string, title?: string) => HTMLButtonElement;
export declare const createSlider: (classname: string, max: number, step?: number) => HTMLInputElement;
export declare const setCustomProperty: (element: HTMLElement | SVGAElement | null, property: string, value: string | number) => HTMLElement | SVGAElement | null;
export declare const toggleClassName: (element: Element, token: string, forced?: boolean) => boolean;
export declare const translate: (element: HTMLElement, x: number, y: number) => void;
export declare const getParentElement: (element: Element | Document) => HTMLElement;
export declare const getBoundingRectArray: (element: Document | Element, addClientArea?: boolean) => DOMRectArray;
export declare const getShadowRoot: (node: Node | null) => ShadowRoot | null;
